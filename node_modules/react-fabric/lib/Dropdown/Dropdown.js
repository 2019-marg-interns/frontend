'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Label = require('../Label');

var _Label2 = _interopRequireDefault(_Label);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _events = require('../util/events');

var _events2 = _interopRequireDefault(_events);

var _fabricComponent = require('../fabricComponent');

var _fabricComponent2 = _interopRequireDefault(_fabricComponent);

var _Dropdown = require('./Dropdown.scss');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var valuePropType = _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.string]);

var Dropdown = (_dec = (0, _fabricComponent2.default)(_Dropdown2.default), _dec(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Dropdown, _React$Component);

  function Dropdown() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Dropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(Dropdown)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.getSelectedOption = function () {
      var _this$props = _this.props;
      var options = _this$props.options;
      var value = _this$props.value;


      return options.filter(function (option) {
        return option.value === value;
      })[0];
    }, _this.handleMouseDown = function (e) {
      var _this$props2 = _this.props;
      var onFocus = _this$props2.onFocus;
      var disabled = _this$props2.disabled;


      _events2.default.pauseEvent(e);

      if (!disabled) {
        if (onFocus) {
          onFocus(e);
        }
      }
    }, _this.handleSelect = function (option, e) {
      var _this$props3 = _this.props;
      var onBlur = _this$props3.onBlur;
      var onChange = _this$props3.onChange;
      var disabled = _this$props3.disabled;


      e.target.value = option.value; // eslint-disable-line no-param-reassign

      if (!disabled) {
        if (onChange) {
          onChange(e, option);
        }
      }

      if (onBlur) {
        onBlur(e, option);
      }
    }, _this.handleDocumentClick = function (e) {
      var _this$props4 = _this.props;
      var active = _this$props4.active;
      var onBlur = _this$props4.onBlur;
      var value = _this$props4.value;


      if (active && !_events2.default.targetIsDescendant(e, _reactDom2.default.findDOMNode(_this))) {
        e.target.value = value; // eslint-disable-line no-param-reassign

        if (onBlur) {
          onBlur(e);
        }
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Dropdown, [{
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      if (!this.props.active && nextProps.active) {
        _events2.default.addEventsToDocument({ click: this.handleDocumentClick });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.active && !this.props.active) {
        _events2.default.removeEventsFromDocument({ click: this.handleDocumentClick });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.active) {
        _events2.default.removeEventsFromDocument({ click: this.handleDocumentClick });
      }
    }
  }, {
    key: 'renderItem',
    value: function renderItem(option, i) {
      var styleName = (0, _classnames2.default)('ms-Dropdown-item', {
        'is-selected': option.value === this.props.value
      });
      var handleSelect = this.handleSelect.bind(this, option);

      return _react2.default.createElement(
        'li',
        { key: i,
          styleName: styleName },
        _react2.default.createElement(
          'div',
          { onMouseDown: handleSelect },
          option.label
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var className = _props.className;
      var disabled = _props.disabled;
      var label = _props.label;
      var name = _props.name;
      var onFocus = _props.onFocus;
      var options = _props.options;
      var placeholder = _props.placeholder;
      var required = _props.required;
      var value = _props.value;
      var props = (0, _objectWithoutProperties3.default)(_props, ['className', 'disabled', 'label', 'name', 'onFocus', 'options', 'placeholder', 'required', 'value']);


      var selected = this.getSelectedOption();
      var styleName = (0, _classnames2.default)('ms-Dropdown', {
        'ms-Dropdown--textLeft': this.props.textLeft,
        'is-open': this.props.active,
        'is-disabled': this.props.disabled
      });

      return _react2.default.createElement(
        'div',
        { 'data-fabric': 'Dropdown',
          styleName: styleName,
          className: className },
        label && _react2.default.createElement(
          _Label2.default,
          { styleName: 'ms-Label',
            htmlFor: '',
            onClick: onFocus,
            required: required,
            disabled: disabled },
          label
        ),
        _react2.default.createElement(
          'div',
          { styleName: 'ms-Dropdown-inner' },
          _react2.default.createElement(_Icon2.default, { styleName: 'ms-Dropdown-caretDown', glyph: 'caretDown' }),
          _react2.default.createElement(
            'select',
            (0, _extends3.default)({}, props, {
              styleName: 'ms-Dropdown-select',
              name: name,
              value: value || '' }),
            options.map(function (option, i) {
              return _react2.default.createElement(
                'option',
                { key: i, value: option.value },
                option.label
              );
            })
          ),
          _react2.default.createElement(
            'span',
            { styleName: 'ms-Dropdown-title', onMouseDown: this.handleMouseDown },
            selected ? selected.label : placeholder
          ),
          _react2.default.createElement(
            'ul',
            { styleName: 'ms-Dropdown-items' },
            options.map(this.renderItem.bind(this))
          )
        )
      );
    }
  }]);
  return Dropdown;
}(_react2.default.Component), _class2.displayName = 'Dropdown', _class2.propTypes = {
  active: _react2.default.PropTypes.bool,
  className: _react2.default.PropTypes.string,
  disabled: _react2.default.PropTypes.bool,
  id: _react2.default.PropTypes.string,
  label: _react2.default.PropTypes.node,
  name: _react2.default.PropTypes.string,
  onBlur: _react2.default.PropTypes.func,
  onChange: _react2.default.PropTypes.func,
  onFocus: _react2.default.PropTypes.func,
  options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    label: _react2.default.PropTypes.string,
    value: valuePropType
  })).isRequired,
  placeholder: _react2.default.PropTypes.string,
  required: _react2.default.PropTypes.bool,
  textLeft: _react2.default.PropTypes.bool,
  value: valuePropType
}, _class2.defaultProps = {
  active: false,
  disabled: false,
  required: false,
  textLeft: false,
  options: []
}, _temp2)) || _class);
exports.default = Dropdown;